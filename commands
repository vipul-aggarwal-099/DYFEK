docker build --tag jwt-api-test .
docker run -p 80:8080 --env-file env_file jwt-api-test

export TOKEN=`curl -d '{"email":"albertoivo@gmail.com","password":"abc123"}' -H "Content-Type: application/json" -X POST localhost:80/auth  | jq -r '.token'`
echo $TOKEN
curl --request GET 'http://127.0.0.1:80/contents' -H "Authorization: Bearer ${TOKEN}" | jq .

eksctl create cluster --name simple-jwt-api

ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
TRUST="{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::${ACCOUNT_ID}:root\" }, \"Action\": \"sts:AssumeRole\" } ] }"
aws iam create-role --role-name UdacityFlaskDeployCBKubectlRole --assume-role-policy-document "$TRUST" --output text --query 'Role.Arn'
echo '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "eks:Describe*", "ssm:GetParameters" ], "Resource": "*" } ] }' > /tmp/iam-role-policy
aws iam put-role-policy --role-name UdacityFlaskDeployCBKubectlRole --policy-name eks-describe --policy-document file:///tmp/iam-role-policy

sudo kubectl get -n kube-system configmap/aws-auth -o yaml > /tmp/aws-auth-patch.yml
<add the roleARN>
sudo kubectl patch configmap/aws-auth -n kube-system --patch "$(cat /tmp/aws-auth-patch.yml)"

aws ssm put-parameter --name JWT_SECRET --value "myjwtsecret" --type SecureString

export TOKEN=`curl -d '{"email":"albertoivo@gmail.com","password":"abc123"}' -H "Content-Type: application/json" -X POST a89fd9e36e1e411e9a77e0eb49b8ca5c-1279669847.us-west-2.elb.amazonaws.com/auth  | jq -r '.token'`

curl --request GET 'a89fd9e36e1e411e9a77e0eb49b8ca5c-1279669847.us-west-2.elb.amazonaws.com/contents' -H "Authorization: Bearer ${TOKEN}" | jq

eksctl delete cluster simple-jwt-api